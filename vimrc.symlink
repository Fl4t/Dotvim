" Pathogen 2.0"{{{
filetype off
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect() " Activer pathogen
call pathogen#helptags() " Sourcing help file
filetype plugin indent on
set nocompatible       " leave the old ways behind...
"}}}
"Couleurs"{{{
syntax on               " activer les couleurs
"}}}
"General"{{{
set complete=.,w,b,t   " paramètre de complétion
set history=400        " historique des commandes vim
set shell=/bin/zsh     " langage shell par défaut
set encoding=utf-8     " UTF-8
set fileencoding=utf-8 " UTF-8
set fileformat=unix
set backspace=2        " règle le comportement de backspace
set mousehide          " hide mouse when typing
let mapleader=","      " change la touche par défaut de vim qui est \
set clipboard=unnamed  " yank est aussi copié en mémoire tampon
set shellslash         " Les / sont remplacées par \ sur windows
set cpoptions+=$       " pour avoir un dollars lorsque l'on change, touche c
set virtualedit=all    " pour ce déplacer même si il n'y a pas de caractère
set lazyredraw         " Don't update the display while executing macros
"}}}
"Interface"{{{
set number                    " (temporaire) relativenumber lag trop
set cursorline                " Affiche la ligne courante en surbrillance
set noshowmode                " vim-powerline le fait très bien
set wildmenu                  " menu en carré
set wim=list:longest,full     " la tronche des possibilité de complétion
set wildignore=*.o,*.bak,*.pyc,*.swp,*.jpg,*.gif,*.png
set visualbell t_vb=          " pas de clignotement
set noerrorbells              " pas de clignotement quand erreur
set guicursor=a:blinkon0      " pas de curseur qui clignote
set cmdheight=2               " 1 ligne en dessous de statusline
set laststatus=2              " toujours voir la barre de statut
"}}}
"Indentation"{{{
set expandtab           " insère des espaces au lieu de tab
set tabstop=2           " nombre d'espaces par tab
set softtabstop=2       " nombre d'espace pour une tab en mode édition
set shiftwidth=2        " pareil mais pour >> <<
set shiftround          " tab toujours multiple de shiftwidth
"}}}
"Édition"{{{
let g:loaded_matchparen=1           " désactive le sur-lignage des paires de parenthèses
set scrolloff=999                   " laisser des lignes en dessus et dessous"
set nowrap                          " pas de retour a la ligne par défaut
set diffopt=filler,iwhite,vertical  " Options pour le mode diff

" Permet de voir les espaces et tab en trop
set listchars=tab:▸\ ,trail:✖,eol:¬,extends:❯,precedes:❮
"}}}
"Replis"{{{
set foldenable          " ferme les replis existant par défaut
set foldmethod=marker   " c'est les marqueurs qui délimite les replis
set foldminlines=2      " nombre de ligne mini pour replis
set fillchars=fold:\ ,  " n'affiche après le nom du replis

" Ces commandes ouvre les replis
set foldopen=block,insert,jump,mark,percent,quickfix,search,tag,undo
"}}}
" Commandes"{{{

" Activer les expressions régulières de Perl
nmap / /\v

" C-p/C-n par defaut ne filtre pas les commandes de l'historique alors que
" Up/Down le fait. Exemple ":pw" va trouver dabord ":pwd" dans l'historique.
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>

" Backquotes -> é
noremap é `

" Display-wise up/down movement instead of linewise.
noremap j gj
noremap k gk

" Permet de placer au milieu de l'écran l'occurence de la recherche
nnoremap n nzzzv
nnoremap N Nzzzv

" Permet d'aller au debut et a la fin d'une ligne plus facilement
noremap H ^
noremap L g_

" Focus le replis ou je suis
nnoremap <leader>z zMzvzz

" Aller au dossier du fichier courant
nnoremap ,cd :cd %:p:h<CR>:pwd<CR>

" Mapping pour éditer le vimrc et le sourcer
nmap <silent> <leader>ev :vsplit $MYVIMRC<CR> " Modifier le vimrc
nmap <silent> <leader>sv :so $MYVIMRC<CR> " Sourcer le vimrc

" faute suivante/précédente
map <leader>fn ]s
map <leader>fp [s

" Use Q for formatting the current paragraph (or visual selection)
vmap Q gq
nmap Q gqap

" contraire de [J]oin
nnoremap S i<cr><esc><right>

" Completion de fichiers
inoremap <c-f> <c-x><c-f>

" Completion de lignes
inoremap <c-l> <c-x><c-l>

" awesome, inserts new line without going into insert mode
map <S-Enter> O<ESC>
map <Enter> o<ESC>

" permet de pouvoir enregistrer sans taper sudo
cmap w!! w !sudo tee % > /dev/null

" Récupère la sélection après une indentation shift
vnoremap <silent> < <gv
vnoremap <silent> > >gv

" Enlève le sur-lignage après une recherche en tapant espace
noremap <silent> <Space> :silent noh<Bar>echo<CR>

" Navigation des fenêtres facile
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Diff.
nnoremap <silent><Leader>do :diffoff!<CR>
nnoremap <silent><Leader>dg :diffget<CR>:diffupdate<CR>
nnoremap <silent><Leader>dp :diffput<CR>:diffupdate<CR>
nnoremap <silent><Leader>du :diffupdate<CR>

" mapping français
map <silent> <F1> "<Esc>:silent setlocal spell! spelllang=fr<CR>"

" Voir les espaces/tab en trop
nnoremap <F3> :set nolist!<CR>

" Mode copier/coller
nnoremap <F4> :set paste!<CR>

" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! w !sudo tee > /dev/null %
"}}}
" autoCommand"{{{
if has("autocmd")

  " Auto-cd au répertoire root si il existe, courant sinon
  function! s:setcwd()
    let cph = expand('%:p:h', 1)
    if cph =~ '^.\+://' | retu | en
    for mkr in ['.git/', '.hg/', '.svn/', '.bzr/', '_darcs/', '.vimprojects']
      let wd = call('find'.(mkr =~ '/$' ? 'dir' : 'file'), [mkr, cph.';'])
      if wd != '' | let &acd = 0 | brea | en
    endfo
    exe 'lc!' fnameescape(wd == '' ? cph : substitute(wd, mkr.'$', '.', ''))
  endfunction
  autocmd BufEnter * call s:setcwd()

  " Supprime automatiquement les espaces de fin de ligne
  au BufWritePre * :%s/\s\+$//e

  " saute a la dernière position du curseur sauf pour les commits
  au BufReadPost *
      \ if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") |
      \ execute 'normal! g`"zvzz' |
      \ endif

  " Fonctions pour fichiers LaTeX
  au BufEnter,BufNewFile *.tex	exe Flatex()

  " Fonctions pour fichiers C
  au BufEnter,BufNewFile *.c	exe FlangageC()

  " Fonctions pour fichiers Java
  au BufEnter,BufNewFile *.java exe Fjava()

  " Fonctions pour fichiers Perl
  au BufEnter,BufNewFile *.pl exe Fperl()
endif
"}}}
"Recherche"{{{
set hlsearch            " surligne les recherches
set incsearch           " increment search
set ignorecase          " case-insensitive search
set smartcase           " uppercase causes case-sensitive search
"}}}
"Buffer/Fenêtres/Tabs"{{{
set hidden          " Pour pouvoir changer de buffer sans sauvegarder
set splitbelow      " ouvre un nouveau fichier en dessous du précédent
"}}}
"Fichier/Backup"{{{
set undofile    " undo fonctionne après avoir fermé le fichier
set autoread    " recharge auto quand un fichier est modifié
set autowrite   " sauvegarde auto quand on change de buffer
set backup      " sauvegarde
set writebackup " écrit le backup avant d'écrire le vrai fichier
set backupdir=$HOME/Documents/vimsave/savefile " dossier des .backup
set directory=$HOME/Documents/vimsave/swapfile " dossier des .swp

if v:version > 702 " FU 7.2
  set undodir=$HOME/Documents/vimsave/undofile   " dossier des .un
  " Make those folders automatically if they don't already exist.
  if !isdirectory(expand(&undodir))
      call mkdir(expand(&undodir), "p")
  endif
endif

if !isdirectory(expand(&backupdir))
    call mkdir(expand(&backupdir), "p")
endif
if !isdirectory(expand(&directory))
    call mkdir(expand(&directory), "p")
endif
"}}}
"Plugins"{{{
" Solarized"{{{
let g:solarized_underline = 0
colorscheme solarized   " colorscheme
set bg=dark             " version sombre de solarized
"}}}
" Signify"{{{
let g:signify_sign_color_inherit_from_linenr = 1
"}}}
" UltiSnips"{{{
imap <c-b> <esc>:call UltiSnips_ListSnippets()<cr>
"}}}
" Airline"{{{
let g:airline_powerline_fonts=1
"}}}
" Syntastic"{{{
let g:syntastic_quiet_warnings=1
let g:syntastic_error_symbol='✗'
let g:syntastic_enable_balloons = 0
"}}}
" Fugitive"{{{
noremap <leader>gs :Gstatus<CR>
noremap <leader>gd :Gdiff<CR>
noremap <leader>gc :Gcommit<CR>
noremap <leader>gb :Gblame<CR>
noremap <leader>gl :Glog<CR>
"}}}
" CtrlP"{{{
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>m :CtrlPMRUFiles<CR>
nnoremap <leader>t :CtrlP<CR>

let g:ctrlp_mruf_exclude = '/tmp/.*\|/temp/.*\|/private/.*' " MacOSX/Linux

let g:ctrlp_custom_ignore = {
	\ 'dir':  '\v[\/]\.(git|hg|svn)$',
	\ 'file': '\v\.(exe|so|dll|class)$',
	\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
	\ }
"}}}
"hexhighlight"{{{
nmap <leader>h :call HexHighlight()<Return>
"}}}
" LanguageTool"{{{
let g:languagetool_jar=$HOME.'/.languagetool/LanguageTool.jar'
let g:languagetool_disable_rules="FRENCH_WHITESPACE,COMMA_PARENTHESIS_WHITESPACE,UNPAIRED_BRACKETS,WHITESPACE_RULE,EN_QUOTES,HUNSPELL_NO_SUGGEST_RULE"
"}}}
" NERDTree"{{{
nnoremap <silent> <F11> :NERDTreeToggle<CR>

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=1
" Don't display these kinds of files
let NERDTreeIgnore=[ '\.class$', '\.ncb$', '\.suo$', '\.vcproj\.RIMNET', '\.obj$',
      \ '\.ilk$', '^BuildLog.htm$', '\.pdb$', '\.idb$',
      \ '\.embed\.manifest$', '\.embed\.manifest.res$',
      \ '\.intermediate\.manifest$', '^mt.dep$' ]
"}}}
" Tagbar"{{{
nnoremap <silent> <F12> :TagbarToggle<CR>
let g:tagbar_width = 31 " like NERDTree
let g:tagbar_ctags_bin = '/bin/ctags'
"}}}
"}}}
"Langages"{{{
"Langage C"{{{
fun! FlangageC()
  noremap <leader>C <c-\><c-n>:!gcc -Wall % -o %<.x<cr>
  setlocal formatoptions-=c formatoptions-=r formatoptions-=o
endf
"}}}
"PHP"{{{
let php_baselib = 1
let php_htmlInStrings = 1
let php_noShortTags = 1
let php_folding = 1
let php_parent_error_close = 1
"}}}
"LaTeX"{{{
function! Flatex()
  " Largeur de texte standard
  set tw=72

  " filetype
  set ft=tex

  " Activer la correction dans les fichier tex
  setlocal spell spelllang=fr

  " Sauvegarde et compilation PDFLaTeX (-> PDF)
  noremap <leader>C <ESC>:w<CR>:!pdflatex %<.tex<CR><CR>

  " Voir le pdf créé
  noremap <leader>pdf <ESC>:w<CR>:!open %<.pdf<CR><CR>
endfunction
"}}}
"Java"{{{
function! Fjava()
  " Sauvegarde et compilation
  noremap <leader>C <ESC>:w<CR>:!javac %<CR>
endfunction
"}}}
"Perl"{{{
function! Fperl()
  " Execution du script courant
  noremap <leader>C <ESC>:w<CR>:!perl %<CR>

  " K cherche dans perldoc
  set keywordprg=perldoc\ -f
endfunction
"}}}
"}}}
"Custom Functions"{{{

" Toggle relative/absolute numbering
nnoremap <F2> :call NumberToggle()<CR>

function! NumberToggle()
  if(&relativenumber == 1)
    set number
  else
    set relativenumber
  endif
endfunc
"}}}
"Next and Last"{{{
"
" Motion for "next/last object". "Last" here means "previous", not "final".
" Unfortunately the "p" motion was already taken for paragraphs.
"
" Next acts on the next object of the given type in the current line, last acts
" on the previous object of the given type in the current line.
"
" Currently only works for (, [, {, b, r, B, ', and ".
"
" din' -> delete in next single quotes foo = bar('spam')
" canb -> change around next parens foo = bar('spam')
" vil" -> select inside last double quotes print "hello ", name
onoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
xnoremap an :<c-u>call <SID>NextTextObject('a', 'f')<cr>
onoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>
xnoremap in :<c-u>call <SID>NextTextObject('i', 'f')<cr>

onoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
xnoremap al :<c-u>call <SID>NextTextObject('a', 'F')<cr>
onoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>
xnoremap il :<c-u>call <SID>NextTextObject('i', 'F')<cr>

function! s:NextTextObject(motion, dir)
  let c = nr2char(getchar())

  if c ==# "b"
    let c = "("
  elseif c ==# "B"
    let c = "{"
  elseif c ==# "r"
    let c = "["
  endif

  exe "normal! ".a:dir.c."v".a:motion.c
endfunction
"}}}
